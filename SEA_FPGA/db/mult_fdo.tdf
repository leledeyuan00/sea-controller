--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=9 LPM_WIDTHB=5 LPM_WIDTHP=14 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_mult 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_padd 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 67 
SUBDESIGN mult_fdo
( 
	dataa[8..0]	:	input;
	datab[4..0]	:	input;
	result[13..0]	:	output;
) 
VARIABLE
	add11_result[10..0]	:	WIRE;
	add15_result[7..0]	:	WIRE;
	add7_result[13..0]	:	WIRE;
	cs2a[2..0] : carry_sum;
	cs4a[1..0] : carry_sum;
	le3a[8..0] : lcell;
	le5a[9..0] : lcell;
	le6a[9..0] : lcell;
	sft10a[13..0] : soft;
	sft12a[10..0] : soft;
	sft13a[10..0] : soft;
	sft14a[10..0] : soft;
	sft16a[7..0] : soft;
	sft17a[7..0] : soft;
	sft18a[7..0] : soft;
	sft8a[13..0] : soft;
	sft9a[13..0] : soft;
	dataa_node[8..0]	: WIRE;
	datab_node[4..0]	: WIRE;
	final_result_node[13..0]	: WIRE;
	w127w[9..0]	: WIRE;
	w12w[5..0]	: WIRE;
	w174w	: WIRE;
	w17w[8..0]	: WIRE;
	w189w	: WIRE;
	w284w[13..0]	: WIRE;
	w81w[9..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	add7_result[] = sft8a[].out + sft9a[].out;
	cs2a[].cin = ( B"0", ((w12w[2..2] & cs2a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs2a[].sin = ( cs2a[1].cout, ((((((! w12w[3..3]) & w12w[2..2]) & cs2a[0].cout) # ((w12w[3..3] & w12w[2..2]) & (! cs2a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs2a[0].cout)) # ((w12w[3..3] & (! w12w[2..2])) & (! cs2a[0].cout))), w12w[1..1]);
	cs4a[].cin = ( ((w12w[2..2] & cs4a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs4a[].sin = ( ((((((! w12w[3..3]) & (! w12w[2..2])) & cs4a[0].cout) # (((! w12w[3..3]) & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs4a[0].cout)), w12w[0..0]);
	le3a[].in = (((w12w[4..4] & cs2a[2].sout) # ((w12w[4..4] & (! cs2a[2].sout)) & (! dataa_node[]))) # (((! w12w[4..4]) & cs2a[2].sout) & dataa_node[]));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[0].sout) & (! cs4a[0].sout))) & (! ((((! ( dataa_node[8..8], dataa_node[])) & cs2a[0].sout) & cs4a[0].sout) # ((( dataa_node[8..8], dataa_node[]) & (! cs2a[0].sout)) & cs4a[0].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs2a[1].sout) & (! cs4a[1].sout))) & (! ((((! ( dataa_node[8..8], dataa_node[])) & cs2a[1].sout) & cs4a[1].sout) # ((( dataa_node[8..8], dataa_node[]) & (! cs2a[1].sout)) & cs4a[1].sout)))));
	sft10a[].in = add7_result[];
	sft12a[].in = ( w189w, ( le3a[7..7].out, ( le3a[6..6].out, ( le3a[5..5].out, ( le3a[4..4].out, ( le3a[3..3].out, ( le3a[2..2].out, ( le3a[1..1].out, ( le3a[0..0].out, ( le5a[3..2].out))))))))));
	sft13a[].in = ( w189w, ( (! w127w[9..9]), ( le6a[8..8].out, ( le6a[7..7].out, ( le6a[6..6].out, ( le6a[5..5].out, ( le6a[4..4].out, ( le6a[3..3].out, ( le6a[2..2].out, ( w189w, cs2a[1].sout))))))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w189w, ( w174w, ( (! w81w[9..9]), ( le5a[8..8].out, ( le5a[7..7].out, ( le5a[6..6].out, ( le5a[5..4].out)))))));
	sft17a[].in = ( w189w, ( w189w, ( w174w, ( w189w, ( w189w, ( w189w, ( w189w, w12w[4..4])))))));
	sft18a[].in = add15_result[];
	sft8a[].in = ( w174w, ( (! w17w[8..8]), ( sft14a[9..9].out, ( sft14a[8..8].out, ( sft14a[7..7].out, ( sft14a[6..6].out, ( sft14a[5..5].out, ( sft14a[4..4].out, ( sft14a[3..3].out, ( sft14a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..0].out)))))))))))));
	sft9a[].in = ( w189w, ( sft14a[10..10].out, ( sft18a[7..7].out, ( sft18a[6..6].out, ( sft18a[5..5].out, ( sft18a[4..4].out, ( sft18a[3..3].out, ( sft18a[2..2].out, ( sft18a[1..1].out, ( sft18a[0..0].out, ( sft14a[1..1].out, ( sft14a[0..0].out, ( w189w, cs2a[0].sout)))))))))))));
	dataa_node[] = ( dataa[8..0]);
	datab_node[] = ( datab[4..0]);
	final_result_node[] = ( w284w[13..0]);
	result[] = ( final_result_node[13..0]);
	w127w[] = le6a[].out;
	w12w[] = ( datab_node[4..4], datab_node[]);
	w174w = B"1";
	w17w[] = le3a[].out;
	w189w = B"0";
	w284w[] = ( sft10a[13..13].out, sft10a[12..12].out, sft10a[11..11].out, sft10a[10..10].out, sft10a[9..9].out, sft10a[8..8].out, sft10a[7..7].out, sft10a[6..6].out, sft10a[5..5].out, sft10a[4..4].out, sft10a[3..3].out, sft10a[2..2].out, sft10a[1..1].out, sft10a[0..0].out);
	w81w[] = le5a[].out;
END;
--VALID FILE
